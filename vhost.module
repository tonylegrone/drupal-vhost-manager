<?php

/**
 * Implements hook_menu().
 */
function vhost_menu() {
  $items['admin/config/vhost'] = array(
    'title' => 'Vhost Config',
    'description' => 'Manage Vhosts configurations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vhost_settings_form'),
    'access arguments' => array('administer vhosts'),
    'file' => 'vhost.admin.inc',
  );
  
  $items['admin/vhost'] = array(
    'title' => 'Vhost Manager',
    'description' => 'Manage Vhost entries.',
    'page callback' => 'vhost_view_objects',
    'access arguments' => array('administer vhosts'),
    'file' => 'vhost.admin.inc',
  );
  
  $items['admin/vhost/add'] = array(
    'title' => 'Add Object',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vhost_object_form'),
    'access arguments' => array('administer vhosts'),
    'file' => 'vhost.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  
  $items['admin/vhost/edit/%vhost'] = array(
    'title' => 'Edit Object',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vhost_object_form', 3),
    'access arguments' => array('administer vhosts'),
    'file' => 'vhost.admin.inc',
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function node_notes_permission() {
  $perms = array(
    'administer vhosts' => array(
      'title' => 'Administer Vhosts',
    ),
  );

  return $perms;
}

/**
 * Implements hook_theme().
 */
function vhost_theme() {
  return array(
    'vhost_view_objects' => array(
      'variables' => array('object_list' => NULL),
      'template' => 'vhost-view-objects',
    ),
    'vhost_object' => array(
      'variables' => array('object' => array()),
      'template' => 'vhost-object',
    ),
  );
}

/**
 * Implements hook_load().
 */
function vhost_load($oid) {
  $result = db_query("SELECT * FROM {vhost_objects} WHERE oid = :oid", array(':oid' => $oid));
  
  foreach ($result as $object) {
    return $object;
  }
}

/**
 * Creats the apache vhost conf file and gracefully restarts apache.
 */
function vhost_create_vhost($object, $sudo_password = NULL) {
  $conf_file = variable_get('vhost_sites_conf_path') . $object['server_name'] . '.conf';
  $log_path = variable_get('vhost_log_path');
  
  $conf_template = theme('vhost_object', array('object' => $object));
  $document_root = variable_get('vhost_document_root_prefix') . $object['document_root'];
  
  if (file_put_contents($conf_file, $conf_template)) {
    
    // Not worried about this being translatable
    drupal_set_message('Success, wrote <pre>' . check_plain($conf_template) . '</pre> to file "' . $conf_file . '".');
    
    // Create site folder
    if (!file_exists($document_root)) {
      // TODO: permissions aren't working
      if(mkdir($document_root)) {
        drupal_set_message('New folder created at %document_root.', array('%document_root' => $document_root));
      } else {
        drupal_set_message(t('Could not create %document_root.', array('%document_root' => $document_root)), 'error');
      }
    }
    
    // Create log folders
    if (!file_exists($log_path . $object['server_name'])) {
      if (mkdir($log_path . $object['server_name'])) {
        drupal_set_message(t('New log folder created for %server_name.', array('%server_name' => $object['server_name'])));
      } else {
        drupal_set_message(t('Could not create log folder.'), 'error');
      }
    }
    
    $graceful_command = variable_get('vhost_graceful_command');
    
    if ($sudo_password) {
      $graceful_command = "echo $sudo_password | sudo -S $graceful_command";
    }
    
    // Try to gracefully restart apache
    exec($graceful_command, $output, $return);
    
    if ($return === 0) {
      drupal_set_message(t('Apache has been gracefully restarted.'));
    } else {
      drupal_set_message(
        t('Apache could not be restarted. Please check your sudo settings or your restart command at !config_link',
          array(
            '!config_link' => l(t('admin/config/vhost'), 'admin/config/vhost'))
          ),
        'error'
      );
    }
    
  } else {
    drupal_set_message(t('The file %conf_file is not writable.', array('%conf_file' => $conf_file), 'error'));
  }
}

function template_preprocess_vhost_object(&$variables) {
  $variables['object']['document_root'] = variable_get('vhost_document_root_prefix') . $variables['object']['document_root'];
  
  if ($variables['object']['server_alias']) {
    $aliases = explode(' ', $variables['object']['server_alias']);
    $variables['object']['server_alias'] = 'ServerAlias ' . implode("\n  ServerAlias ", $aliases);
  }
}