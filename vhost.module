<?php

/**
 * Implements hook_menu().
 */
function vhost_menu() {
  $items['admin/config/vhost'] = array(
    'title' => 'Vhost config',
    'description' => 'Manage vhosts configurations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vhost_settings_form'),
    'access arguments' => array('administer vhosts'),
    'file' => 'vhost.admin.inc',
  );

  $items['admin/vhost'] = array(
    'title' => 'Vhost manager',
    'description' => 'Manage vhost entries.',
    'page callback' => 'vhost_view_objects',
    'access arguments' => array('administer vhosts'),
    'file' => 'vhost.admin.inc',
  );

  $items['admin/vhost/add'] = array(
    'title' => 'Add object',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vhost_object_form'),
    'access arguments' => array('administer vhosts'),
    'file' => 'vhost.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/vhost/edit/%vhost'] = array(
    'title' => 'Edit object',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vhost_object_form', 3),
    'access arguments' => array('administer vhosts'),
    'file' => 'vhost.admin.inc',
  );

  $items['admin/vhost/import'] = array(
    'title' => 'Import vhosts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vhost_import_form', 3),
    'access arguments' => array('administer vhosts'),
    'file' => 'vhost.admin.inc',
  );

  $items['admin/vhost/autocomplete'] = array(
    'title' => 'Vhost autocomplete',
    'page callback' => 'vhost_autocomplete',
    'access arguments' => array('administer vhosts'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function node_notes_permission() {
  $perms = array(
    'administer vhosts' => array(
      'title' => 'Administer Vhosts',
    ),
  );

  return $perms;
}

/**
 * Implements hook_theme().
 */
function vhost_theme() {
  return array(
    'vhost_view_objects' => array(
      'variables' => array('object_list' => NULL),
      'template' => 'vhost-view-objects',
    ),
    'vhost_object' => array(
      'variables' => array('object' => array()),
      'template' => 'vhost-object',
    ),
  );
}

/**
 * Implements hook_load().
 */
function vhost_load($oid) {
  $result = db_query("SELECT * FROM {vhost_objects} WHERE oid = :oid", array(':oid' => $oid));

  foreach ($result as $object) {
    return $object;
  }
}

/**
 * Creates the apache vhost conf file and gracefully restarts apache.
 */
function vhost_create_vhost($object, $sudo_password = NULL) {
  $conf_file = variable_get('vhost_sites_conf_path') . $object['server_name'] . '.conf';
  $log_path = variable_get('vhost_log_path');

  $conf_template = theme('vhost_object', array('object' => $object));
  $document_root = variable_get('vhost_document_root_prefix') . $object['document_root'];

  if (file_put_contents($conf_file, $conf_template)) {

    // Not worried about this being translatable
    drupal_set_message('Success, wrote <pre>' . check_plain($conf_template) . '</pre> to file "' . $conf_file . '".');

    // Create site folder
    if (!file_exists($document_root)) {
      // TODO: permissions aren't working
      if(mkdir($document_root)) {
        drupal_set_message('New folder created at %document_root.', array('%document_root' => $document_root));
        if(chown($document_root, 'tonylegrone')) {
          drupal_set_message('Changed owner of %document_root.', array('%document_root' => $document_root));
        } else {
          drupal_set_message(t('Could not change owner of %document_root.', array('%document_root' => $document_root)), 'error');
        }
      } else {
        drupal_set_message(t('Could not create %document_root.', array('%document_root' => $document_root)), 'error');
      }
    }

    // Create log folders
    if (!file_exists($log_path . $object['server_name'])) {
      if (mkdir($log_path . $object['server_name'])) {
        drupal_set_message(t('New log folder created for %server_name.', array('%server_name' => $object['server_name'])));
      } else {
        drupal_set_message(t('Could not create log folder.'), 'error');
      }
    }

    drupal_set_message(t('Don\'t forget to restart Apache!'), 'warning');

  } else {
    drupal_set_message(t('The file %conf_file is not writable.', array('%conf_file' => $conf_file)), 'error');
  }
}

function template_preprocess_vhost_object(&$variables) {
  $variables['object']['document_root'] = variable_get('vhost_document_root_prefix') . $variables['object']['document_root'];

  if ($variables['object']['server_alias']) {
    $aliases = explode("\n", $variables['object']['server_alias']);
    $variables['object']['server_alias'] = 'ServerAlias ' . implode("\n  ServerAlias ", $aliases);
  }
}

/**
 * Menu callback: autocomplete data for documentRoot field.
 */
function vhost_autocomplete($string = '') {
  $matched = array();

  if ($string) {
    $path = variable_get('vhost_document_root_prefix');
    $folders = scandir($path);
    foreach ($folders as $folder) {
      if (is_dir($path . $folder) == FALSE) continue;

      if (strpos($folder, $string) !== FALSE) {
        if (vhost_folder_in_use($folder)) {
          $matches[$folder] = '<em style="color: #bbb;">' . $folder . '</em>';
        }
        else {
          $matches[$folder] = $folder;
        }
      }
    }
  }

  // Limit results to 15.
  $matches = array_slice($matches, 0, 15);
  return drupal_json_output($matches);
}

/**
 * Determines if a documentRoot folder is in use by an existing vhost object.
 */
function vhost_folder_in_use($folder) {
  return (bool) db_query('SELECT count(oid)
    FROM {vhost_objects}
    WHERE document_root = :folder',
    array(
      ':folder' => $folder,
    ))->fetchField();
}
